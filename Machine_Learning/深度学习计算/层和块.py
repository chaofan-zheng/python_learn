import torch
from torch import nn
from torch.nn import functional as F

"""
自定义块

将输入数据作为其前向传播函数的参数。

通过前向传播函数来生成输出。请注意，输出的形状可能与输入的形状不同。例如，我们上面模型中的第一个全连接的层接收一个20维的输入，但是返回一个维度为256的输出。

计算其输出关于输入的梯度，可通过其反向传播函数进行访问。通常这是自动发生的。

存储和访问前向传播计算所需的参数。

根据需要初始化模型参数。


"""



if __name__ == '__main__':
    #  下面的代码生成一个网络，其中包含一个具有256个单元和ReLU激活函数的全连接隐藏层， 然后是一个具有10个隐藏单元且不带激活函数的全连接输出层。
    net = nn.Sequential(nn.Linear(20, 256),  # 输入20个特征，输出256个隐藏层单元
                        nn.ReLU(),
                        nn.Linear(256, 10))  # 输入256个特征，输出10个

    X = torch.rand(2, 20)
    print(net(X))
    """
    简而言之，nn.Sequential定义了一种特殊的Module， 即在PyTorch中表示一个块的类， 它维护了一个由Module组成的有序列表。 
    注意，两个全连接层都是Linear类的实例， Linear类本身就是Module的子类。 
    另外，到目前为止，我们一直在通过net(X)调用我们的模型来获得模型的输出。 这实际上是net.__call__(X)的简写。 
    这个前向传播函数非常简单： 它将列表中的每个块连接在一起，将每个块的输出作为下一个块的输入。
    """
